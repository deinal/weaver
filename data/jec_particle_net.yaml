selection:

new_variables:
   ch_mask: ak.ones_like(ch_pt)
   ne_mask: ak.ones_like(ne_pt)
   sv_mask: ak.ones_like(sv_pt)
   pt_log: np.log(pt)
   ch_pt_log: np.log(ch_pt)
   ne_pt_log: np.log(ne_pt)
   sv_pt_log: np.log(sv_pt)
   ch_rel_pt: ch_pt / pt
   ne_rel_pt: ne_pt / pt
   sv_rel_pt: sv_pt / pt
   ch_deta: (ch_eta - eta) * np.sign(eta)
   ne_deta: (ne_eta - eta) * np.sign(eta)
   sv_deta: (sv_eta - eta) * np.sign(eta)
   ch_dphi: (ch_phi - phi + np.pi) % (2 * np.pi) - np.pi
   ne_dphi: (ne_phi - phi + np.pi) % (2 * np.pi) - np.pi
   sv_dphi: (sv_phi - phi + np.pi) % (2 * np.pi) - np.pi

preprocess:
   ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
   method: manual
   ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
   data_fraction:

inputs:
   ch_points:
      length: 64
      vars: 
         - ch_deta
         - ch_dphi
   ch_features:
      length: 64
      vars:
         - ch_pt_log
         - ch_dxy
         - ch_dxy_significance
         - ch_dz
         - ch_num_hits
         - ch_norm_chi2
         - ch_pv_ass
         - ch_id
         - ch_rel_pt
         - ch_deta
         - ch_dphi
   ch_mask:
      length: 64
      vars:
         - ch_mask
   ne_points:
      length: 64
      vars: 
         - ne_deta
         - ne_dphi
   ne_features:
      length: 64
      vars:
         - ne_pt_log
         - ne_hcal_frac
         - ne_id
         - ne_rel_pt
         - ne_deta
         - ne_dphi
   ne_mask:
      length: 64
      vars:
         - ne_mask
   sv_points:
      length: 16
      vars: 
         - sv_deta
         - sv_dphi
   sv_features:
      length: 16
      vars:
         - sv_pt_log
         - sv_mass
         - sv_distance
         - sv_significance
         - sv_num_tracks
         - sv_rel_pt
         - sv_deta
         - sv_dphi
   sv_mask:
      length: 16
      vars:
         - sv_mask
   jet_features:
      length:
      vars:
         - pt_log
         - eta
         - phi
         - mass
         - area
         - rho
         - num_pv


labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   type: custom
   value: 
      target: np.log(pt_gen / pt)

observers:
   - pt
   - pt_gen
   - pt_full_corr
   - eta_gen
   - parton_flavor
   - hadron_flavor

weights:
